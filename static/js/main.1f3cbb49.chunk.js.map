{"version":3,"sources":["redux/contact-action.js","redux/contacts-operations.js","components/Form.jsx","redux/contacts-selectors.js","components/ContactList.jsx","components/Filter.jsx","App.js","redux/contacts-reducer.js","redux/store.js","index.js","components/Style.module.css"],"names":["fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filteredContact","axios","defaults","baseURL","fetchContacts","dispatch","get","then","data","catch","error","Form","state","name","number","nameInputId","uuidv4","numberInputId","handleChange","event","currentTarget","value","setState","handleFormSubmit","preventDefault","props","onSubmitData","reset","onSubmit","this","className","style","form","htmlFor","type","pattern","title","required","onChange","id","input","btn","Component","connect","post","contactsOperations","loadingContacts","loading","getFilter","filter","filteredContacts","createSelector","contacts","normaliseNameContact","toLowerCase","contact","includes","onDeteleContact","delete","deleteContact","list","undefined","map","item","onClick","e","target","App","wrapper","formSubmitData","isLoadingContacts","createReducer","_","payload","find","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1f3cbb49.chunk.js","sourcesContent":["// import types from './types';\r\n\r\n// import { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// ==================== fetch contact ================================//\r\n\r\nconst fetchContactRequest = createAction('contact/fetchContactRequest');\r\nconst fetchContactSuccess = createAction('contact/fetchContactSuccess');\r\nconst fetchContactError = createAction('contacts/fetchContactError');\r\n\r\n// ==================== add contact ================================//\r\nconst addContactRequest = createAction('contact/addContactRequest');\r\nconst addContactSuccess = createAction('contact/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n// ==================== delete contact ================================//\r\nconst deleteContactRequest = createAction('contact/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contact/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n// const AddContact = createAction('contact/add', ({ name, number }) => ({\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// }));\r\n\r\n// const deleteContact = createAction('contact/delete');\r\n\r\nconst filteredContact = createAction('contact/filter');\r\n\r\nexport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  filteredContact,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n};\r\n\r\n// ========redux action withuout redux-toolkit=========//\r\n\r\n// const AddContact = ({ name, number }) => ({\r\n//   type: types.ADD_CONTACT,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE_CONTACT,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const filteredContact = value => ({\r\n//   type: types.FILTER_CONTACT,\r\n//   payload: value,\r\n// });\r\n\r\n//===================================================//\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contact-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst AddContact = data => dispatch => {\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', data)\r\n    .then(({ data }) => dispatch(addContactSuccess({ data })))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport { AddContact, deleteContact, fetchContacts };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsOperations from '../redux/contacts-operations';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport style from './Style.module.css';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = uuidv4();\r\n  numberInputId = uuidv4();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleFormSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmitData(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleFormSubmit} className={style.form}>\r\n        <label htmlFor={this.nameInputId}>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            id={this.nameInputId}\r\n            className={style.input}\r\n          />\r\n        </label>\r\n        <label htmlFor={this.numberInputId}>\r\n          Phone:\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            id={this.numberInputId}\r\n            className={style.input}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={style.btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmitData: data => dispatch(contactsOperations.AddContact(data)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Form);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getAllContacts = state => state.contacts;\r\n\r\nconst loadingContacts = state => state.loading;\r\n\r\nconst getFilter = state => state.filter;\r\n\r\n// const filteredContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normaliseNameContact = filter.toLowerCase();\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normaliseNameContact),\r\n//   );\r\n// };\r\n\r\nconst filteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normaliseNameContact = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normaliseNameContact),\r\n    );\r\n  },\r\n);\r\n\r\nexport { loadingContacts, getFilter, filteredContacts };\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport style from './Style.module.css';\r\nimport { deleteContact, fetchContacts } from '../redux/contacts-operations';\r\nimport { filteredContacts } from '../redux/contacts-selectors';\r\n\r\nconst ContactList = ({ contacts, onDeteleContact }) => (\r\n  <ul className={style.list}>\r\n    {contacts !== undefined &&\r\n      contacts.map(({ id, name, number }) => (\r\n        <li key={id} className={style.item}>\r\n          {name}: {number};\r\n          <button onClick={() => onDeteleContact(id)}>Delete contact</button>\r\n        </li>\r\n      ))}\r\n  </ul>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: filteredContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDeteleContact: id => dispatch(deleteContact(id)),\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport style from './Style.module.css';\r\nimport { filteredContact } from '../redux/contact-action';\r\nimport { getFilter } from '../redux/contacts-selectors';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className={style.filter}>\r\n    Filter by name:\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(filteredContact(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from 'react';\r\nimport Form from './components/Form.jsx';\r\nimport ContactList from './components/ContactList.jsx';\r\nimport Filter from './components/Filter.jsx';\r\nimport { fetchContacts } from './redux/contacts-operations';\r\nimport { loadingContacts } from './redux/contacts-selectors';\r\nimport style from './components/Style.module.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={style.wrapper}>\r\n        <h1>Phonebook</h1>\r\n        <Form onSubmitData={this.formSubmitData} />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoadingContacts: loadingContacts(state),\r\n});\r\n\r\nconst mapDiaspatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDiaspatchToProps)(App);\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  filteredContact,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contact-action';\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => {\r\n    const { name } = payload.data;\r\n    const isFinded = state.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n    if (isFinded) {\r\n      alert('Контакт уже есть в списке !');\r\n      return;\r\n    }\r\n    return [payload.data, ...state];\r\n  },\r\n  [deleteContactSuccess]: (state, { payload }) => {\r\n    return state.filter(({ id }) => id !== payload);\r\n  },\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filteredContact]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\n// ========redux redusers withuout redux-toolkit=========//\r\n\r\n// import types from './types';\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD_CONTACT:\r\n//       const { name } = payload;\r\n//       const isFinded = state.find(\r\n//         contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n//       );\r\n//       if (isFinded) {\r\n//         alert('Контакт уже есть в списке !');\r\n//         return state;\r\n//       }\r\n//       return [payload, ...state];\r\n//     case types.DELETE_CONTACT:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER_CONTACT:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport combineReducers from './contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: combineReducers,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});\r\n\r\nexport default store;\r\n\r\n// ========redux store withuout redux-toolkit=========//\r\n\r\n// import { createStore } from 'redux';\r\n\r\n// const store = createStore(\r\n//   contactReducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n// );\r\n\r\n//======================================================//\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Style_wrapper__25YNf\",\"form\":\"Style_form__2nSUU\",\"input\":\"Style_input__1feWh\",\"btn\":\"Style_btn__z11Rz\",\"filter\":\"Style_filter__2KOr_\",\"list\":\"Style_list__3YfSM\",\"item\":\"Style_item__2eLF8\"};"],"sourceRoot":""}